head	1.4;
access;
symbols;
locks
	sfleisch:1.4; strict;
comment	@# @;


1.4
date	2018.10.10.22.39.01;	author sfleisch;	state Exp;
branches;
next	1.3;

1.3
date	2018.10.10.17.13.41;	author sfleisch;	state Exp;
branches;
next	1.2;

1.2
date	2018.10.10.00.43.01;	author sfleisch;	state Exp;
branches;
next	1.1;

1.1
date	2018.10.09.22.31.53;	author sfleisch;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#!/usr/bin/env python
import sys
import traceback
import re
import subprocess
import os
from launcherutils import launcherutils

def main():
    try:
        co=launcherutils(sys.argv)
        co.setup_mpirun()
        print('__exp.framework_title__="TensorFlow"',file=co.logfile)
        caffe_bench(
                    dlbs_root=None,
                    caffe_data_mean_file=None,
                    caffe_data_mean_file_name=None,
                    caffe_model_file=None,
                    caffe_nvidia_backward_math_precision=None,
                    caffe_nvidia_backward_precision=None,
                    caffe_nvidia_forward_math_precision=None,
                    caffe_nvidia_forward_precision=None,
                    caffe_solver=None,
                    caffe_solver_file=None,
                    exp_data_dir=None,
                    exp_docker=None,
                    exp_effective_batch=None,
                    exp_framework_fork=None,
                    exp_log_file=None,
                    exp_model=None,
                    exp_phase=None,
                    exp_replica_batch=None,
                    host_model_dir=None
                ):
    except Exception as e:
        print('Caught exception. Exiting.')
        traceback.print_exc()
        sys.exit(-1)
@


1.3
log
@*** empty log message ***
@
text
@a7 2
import fnmatch
from shutil import copyfile
d14 21
a34 70
        print("DLB_ROOT",os.environ['DLBS_ROOT'])

        # Make sure model exists
        host_model_dir='{}/python/caffe_benchmarks/models/{}'.format(os.environ['DLBS_ROOT'], co.vdict['exp_model'])
        model_file=co.findfiles("{host_model_dir}/".format(host_model_dir=host_model_dir),
                                "*.{exp_phase}.prototxt".format(exp_phase=co.vdict['exp_phase']))[-1]
        caffe_model_file =  os.path.join(host_model_dir, co.vdict['caffe_model_file'])
        caffe_solver_file = os.path.join(host_solver_dir,co.vdict['caffe_solver_file'])

        if not os.path.isfile(model_file):
            report_and_exit("failure","A model file ({model_file}) does not exist.".format(model_file=model_file))
            raise(ValueError)
        co.remove_files(["caffe_model_file".format(host_model_dir=host_model_dir,caffe_model_file=caffe_model_file),
                         "{host_model_dir}/{caffe_solver_file}".format(host_model_dir=host_model_dir,caffe_solver_file=caffe_solver_file)])
        co.copy_files([(model_file, caffe_model_file)])
        if co.vdict[exp_phase] == "training":
            if co.vdict["exp_data_dir"] == "":
                co.sed(caffe_model_file, "^#synthetic","")
            else
                if co.vdict["exp_docker"] == "true":
                    real_data_dir="/workspace/data"
                    real_data_mean_file="/workspace/image_mean/{caffe_data_mean_file_name}".\
                        format(caffe_data_mean_file_name=co.vdict["caffe_data_mean_file_name"])
                else:
                    real_data_dir=co.vdict["exp_data_dir"]
                    real_data_mean_file=co.vdict["caffe_data_mean_file"]
                co.sed(caffe_model_file,outfile=None,pats=[
                    ("^#data",""),
                    ("__CAFFE_MIRROR__","${caffe_mirror}"),
                    ("__CAFFE_DATA_MEAN_FILE__",real_data_mean_file),
                    ("__CAFFE_DATA_DIR__",real_data_dir),
                    ("__CAFFE_DATA_BACKEND__","${caffe_data_backend}")
                    ])
            if co.vdict["exp_framework_fork"] == "nvidia":
                co.sed(caffe_model_file,outfile=None,pats=[
                    ("^#precision",""),
                    ("__FORWARD_TYPE___",co.vdict["caffe_nvidia_forward_precision"]),
                    ("__BACKWARD_TYPE___",co.vdict["caffe_nvidia_backward_precision"]),
                    ("__FORWARD_MATH___",co.vdict["caffe_nvidia_forward_math_precision"]),
                    ("__BACKWARD_MATH___",co.vdict["caffe_nvidia_backward_math_precision"])
                    ])
        if co.vdict["exp_framework_fork"] == "nvidia":
            # NVIDIA Caffe - strong scaling for real data and weak scaling for synthetic one
            if co.vdict["exp_data_dir"] == "":
                # Synthetic data with 'Input' layer - Caffe is in weak scaling model
                co.sed(caffe_model_file,pats=[("__EXP_DEVICE_BATCH__",co.vdict["exp_replica_batch"])])
            else:
                # Real data - Caffe is in strong scaling mode - it will divide whatever batch size we have in
                # protobuf by number of solvers.
                co.sed(caffe_model_file,pats=[("__EXP_DEVICE_BATCH__",co.vdict["exp_effective_batch"])])
        else:
            # This is for BVLC/Intel Caffe
            co.sed(caffe_model_file,pats=[("__EXP_DEVICE_BATCH__",co.vdict["exp_replica_batch"])])

        if co.vdict["exp_phase"] == "training": 
            with open(co.vdict["host_model_dir"]/co.vdict["caffe_solver_file"],'w') as w:
                for l in co.vdict['caffe_solver']: w.write(l)
        net_name=co.grep("os.path.join(host_model_dir,caffe_model_file),'^name: +"(.*?)"',1,launcherutils.GrepRet.first)

        with open(co.vdict['exp_log_file'],'a') as a:
            print('__exp.model_title__= "{net_name}"'.format(net_name=net_name),file=a)

        benchmark_command="caffe {caffe_action} {caffe_args}".format(caffe_action=co.vdict["caffe_action"],co.vdict["caffe_args=caffe_args"])

        print('benchmark command: '.format(benchmark_command))
        # add subprocess command here
        
        # Do some post-processing
        co.remove_files(["caffe_model_file" "caffe_solver_file"])
        co.caffe_postprocess_log()
@


1.2
log
@*** empty log message ***
@
text
@d19 1
a19 1
        host_model_dir='{}/python/caffe_benchmarks/models/{}'.format(os.environ['DLBS_ROOT'], co.vidict['exp_model'])
d79 1
@


1.1
log
@Initial revision
@
text
@d80 1
d84 1
a84 1
        caffe_postprocess_log "${exp_log_file}" "${__batch_file__}" "${exp_phase}" "${exp_replica_batch}" "${exp_effective_batch}" "${exp_num_batches}"
@
