Bootstrap: localimage
FROM: tensorflow-!{TF_VERSION}-prelim.img
%labels
	Maintainer Stephen Fleischman
    Framework TensorFlow
    Version !{TF_VERSION}
    Build  CUDA !{CUDA_VERSION} cuDNN ${CUDNN_VERSION} x86_64 AVX2 (Broadwell), OFED IB.
    Base TensorFLow installation

%help
    #change when version changes
    TensorFlow !{TF_VERSION} GPU Singularity Container
    Maintainer: Stephen Fleischman

%setup
    #TensorRT version
    cp !{COMMON}/upload/!{TRT_REPO} $SINGULARITY_ROOTFS


%post
    export PATH=/opt/anaconda3/bin:/usr/local/cuda/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    apt-get install libibverbs-dev
    # Update when hardware changes - not sure if this should be hardwired here.
    export TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,3.7,5.2,6.0,6.1,7.0 
    export OFED=MLNX_OFED_LINUX-!{OFED_VERSION}-!{OFED_ARCH}
    export HPCX=hpcx-!{HPCX_VERSION}-!{HPCX_ARCH}-MLNX_OFED_LINUX-!{OFED_VERSION}-!{OFED_ARCH}
    export HPCX_MPI_DIR=/opt/${HPCX}/ompi-!{OMPI_VERSION}
    # Configure the build for our CUDA configuration.
    export CI_BUILD_PYTHON=/opt/anaconda3/bin/python
    export PYTHON_BIN_PATH=/opt/anaconda3/bin/python 
    export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH 
    export TF_NEED_CUDA=1 
    export TF_CUDA_VERSION=!{CUDA_VERSION}
    export TF_NCCL_VERSION=!{NCCL_VERSION}
    export NCCL_INSTALL_PATH=/usr/local/nccl_!{NCCL_VERSION}+!{NCCL_ARCH}
    export TF_CUDNN_VERSION=!{CUDNN_VERSION}
    export TF_ENABLE_XLA=1 
    export TF_NEED_TENSORRT=1
    export TF_NEED_VERBS=0 
    export TF_NEED_JEMALLOC=1 

    pip install h5py
    pip install keras_applications --no-deps
    pip install keras_preprocessing --no-deps

    ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1

    if [ "$TF_NEED_TENSORRT"==1 ];then
        #Probably goes away with the next version
        #Install tensorrt and move to Anaconda Python !{PYTHON_VERSION}
        dpkg -i /!{TRT_REPO}
        rm -f /!{TRT_REPO}
        apt-get update
        apt-get install -y --no-install-recommends tensorrt python3-libnvinfer-doc uff-converter-tf
#        tar cvf /tmp/dist-packages.tar -C /usr/lib/python3.5/dist-packages .
#        rm  -rf /usr/lib/python3.5/dist-packages/
#        cd /opt/anaconda3/lib/python3.6/site-packages
#        tar xvf /tmp/dist-packages.tar
#        rm /tmp/dist-packages.tar
#        # The current TensorRT whl assumes Python 3.5. This is a workaround that will hopefully go away with version 5 (in RC now).
#        cd /opt/anaconda3/lib/python3.6/site-packages/tensorrt
#        mv ./infer/_nv_infer_bindings.cpython-35m-x86_64-linux-gnu.so ./infer/_nv_infer_bindings.cpython-36m-x86_64-linux-gnu.so
#        mv ./plugins/_nv_infer_plugin_bindings.cpython-35m-x86_64-linux-gnu.so ./plugins/_nv_infer_plugin_bindings.cpython-36m-x86_64-linux-gnu.so
#        mv ./utils/_nv_utils_bindings.cpython-35m-x86_64-linux-gnu.so ./utils/_nv_utils_bindings.cpython-36m-x86_64-linux-gnu.so
#        mv ./parsers/uffparser/_nv_uff_parser_bindings.cpython-35m-x86_64-linux-gnu.so ./parsers/uffparser/_nv_uff_parser_bindings.cpython-36m-x86_64-linux-gnu.so
#        mv ./parsers/onnxparser/_nv_onnx_parser_bindings.cpython-35m-x86_64-linux-gnu.so ./parsers/onnxparser/_nv_onnx_parser_bindings.cpython-36m-x86_64-linux-gnu.so
#        mv ./parsers/caffeparser/_nv_caffe_parser_bindings.cpython-35m-x86_64-linux-gnu.so ./parsers/caffeparser/_nv_caffe_parser_bindings.cpython-36m-x86_64-linux-gnu.so
    fi 

    # Download and build TensorFlow.
    # Install the latest TensorFlow release
    cd /opt
    tarball_url=`wget -qO- https://api.github.com/repos/tensorflow/tensorflow/releases/latest |grep '"tarball_url"'|awk '{print $2}'|sed -e "s/,$//" -e 's/"//g'`
    wget $tarball_url -O tensorflow.tgz
    tar xvzf tensorflow.tgz && rm tensorflow.tgz
    mv tensorflow* tensorflow
    cd tensorflow
    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH}:/usr/lib/x86_64-linux-gnu \
        tensorflow/tools/ci_build/builds/configured GPU \
        /usr/local/bin/bazel build -c opt --copt=-march="broadwell" --config=cuda //tensorflow/tools/pip_package:build_pip_package \
                   --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
                   --copt="-O3" --copt=-mavx --copt=-mavx2 \
                   tensorflow/tools/pip_package:build_pip_package 
    rm /usr/local/cuda/lib64/stubs/libcuda.so.1 
    export CI_BUILD_PYTHON=/opt/anaconda3/bin/python
    export PYTHON_BIN_PATH=/opt/anaconda3/bin/python
    export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH 
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip 
    /opt/anaconda3/bin/pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl 
    rm -rf /tmp/pip  ~/.cache/bazel

    # Uber Horvod
    mkdir -p /scrap/jenkins/workspace/hpc-power-pack/label/r-vmb-ubuntu16-u4-x86-64-MOFED-CHECKER
    ln -sf  /opt /scrap/jenkins/workspace/hpc-power-pack/label/r-vmb-ubuntu16-u4-x86-64-MOFED-CHECKER/hpcx_root
    ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1

    export PATH=$HPCX_MPI_DIR/bin:$PATH
    export OLD_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64/stubs
    export HOROVOD_NCCL_INCLUDE=/usr/include/nccl.h
    export HOROVOD_NCCL_LIB=/usr/lib/x86_64-linux-gnu
    HOROVOD_GPU_ALLREDUCE=NCCL /opt/anaconda3/bin/pip install horovod
    rm  /scrap/jenkins/workspace/hpc-power-pack/label/r-vmb-ubuntu16-u4-x86-64-MOFED-CHECKER/hpcx_root
    rm -rf /scrap/jenkins/workspace/hpc-power-pack/label/r-vmb-ubuntu16-u4-x86-64-MOFED-CHECKER
    rm /usr/local/cuda/lib64/stubs/libcuda.so.1
    export LD_LIBRARY_PATH=OLD_LD_LIBRARY_PATH

    ldconfig -v

%runscript
    echo "Singularity Container: TensorFlow !{TF_VERSION}, Ubuntu !{UBUNTU_VERSION}, CUDA !{CUDA_VERSION}, cuDNN ${CUDNN_VERSION}, Anaconda Python !{PYTHON_VERSION}, AVX2 instructions."
    echo "The image contains: TensorFlow, Jupyter, and Horovod for TensorFlow"
