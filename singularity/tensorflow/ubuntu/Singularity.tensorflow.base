Bootstrap: localimage
FROM: tensorflow-1.10.1-prelim.img
%environment
    # Can't get automatic sourcing of the HPCX init file. So hardwiring it here.
    # Version specific assignments here.
    export CUDA_DIR=/usr/local/cuda
    export HPCX_DIR=/opt/hpcx-v2.0.0-gcc-MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64
    export HPCX_MPI_DIR=${HPCX_DIR}/ompi-v3.0.x
    export HPCX_IPM_DIR=${HPCX_MPI_DIR}/tests/ipm-2.0.6
#    # No version specific specifications below this line.
    export HPCX_IPM_LIB=${HPCX_IPM_DIR}/lib/libipm.so
    export HPCX_BUPC_DIR=${HPCX_DIR}/bupc
    export HPCX_IBPROF_LIB=${HPCX_DIR}/ibprof/lib/libibprof.so
    export HPCX_SHARP_DIR=${HPCX_DIR}/sharp
    export HPCX_HCOLL_DIR=${HPCX_DIR}/hcoll
    export HPCX_MXM_DIR=${HPCX_DIR}/mxm
    export HPCX_UCX_DIR=${HPCX_DIR}/ucx
    export HPCX_IBPROF_DIR=${HPCX_DIR}/ibprof
    export HPCX_FCA_DIR=${HPCX_DIR}/fca
    export HPCX_OSHMEM_DIR=${HPCX_MPI_DIR}
    export HPCX_MPI_TESTS_DIR=${HPCX_OSHMEM_DIR}/tests
    export SHMEM_HOME=${HPCX_MPI_DIR}
    export OPAL_PREFIX=${HPCX_MPI_DIR}
    export OMPI_HOME=${HPCX_MPI_DIR}
    export MPI_HOME=${HPCX_MPI_DIR}
    export OSHMEM_HOME=${HPCX_MPI_DIR}
    export LD_LIBRARY_PATH=${HPCX_DIR}/mxm/lib:${HPCX_UCX_DIR}/lib:${HPCX_SHARP_DIR}/lib:${HPCX_HCOLL_DIR}/lib:${HPCX_MPI_DIR}/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CUDA_DIR}/lib64:${CUDA_DIR}/extras/CUPTI/lib64:/usr/local/nccl_2.2.13-1+cuda9.2_x86_64/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/.singularity.d/libs:/usr/lib/x86_64-linux-gnu
    export PATH=${HPCX_DIR}/bupc/bin:${HPCX_DIR}/hcoll/bin:${HPCX_DIR}/ucx/bin:${HPCX_DIR}/mxm/bin
    export PATH=${PATH}:${HPCX_MPI_DIR}/bin:${CUDA_DIR}/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    export CPATH=${HPCX_MPI_DIR}/include:${HPCX_UCX_DIR}/include:${HPCX_SHARP_DIR}/include:${HPCX_MXM_DIR}/include:${HPCX_HCOLL_DIR}/include
    export JUPYTER_CONFIG_DIR=/.jupyter
    export PATH=/opt/anaconda3/bin:$PATH

%labels
	Maintainer Stephen Fleischman
    Framework TensorFlow
    Version 1.10.1
    Build  CUDA 9.2 cuDNN 7.1 x86_64 AVX2 (Broadwell), OFED IB.
    Base TensorFLow installation

%help
    #change when version changes
    TensorFlow 1.10.1 GPU Singularity Container
    Maintainer: Stephen Fleischman
%files
    #change when version changes
    tensorflow-1.10.1.tgz /
%post
    # Update when versions change
    export tf_version=1.10.1
    export OFED=MLNX_OFED_LINUX-4.2-1.2.0.0-ubuntu16.04-x86_64
    export HPCX=hpcx-v2.0.0-gcc-MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64
    export HPCX_MPI_DIR=/opt/${HPCX}/ompi-v3.0.x
    export PATH=/opt/anaconda3/bin:$PATH
    ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1
    # Download and build TensorFlow.
    cd /opt
    tar xvzf /tensorflow-${tf_version}.tgz
    rm /tensorflow-${tf_version}.tgz
    cd tensorflow
#    git clone https://github.com/tensorflow/tensorflow.git tensorflow
#    cd tensorflow
#    git reset --hard 25c197e02393bd44f50079945409009dd4d434f8
#    git submodule update

    # Configure the build for our CUDA configuration.
    export CI_BUILD_PYTHON=/opt/anaconda3/bin/python
    export PYTHON_BIN_PATH=/opt/anaconda3/bin/python 
    export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH 
    export TF_NEED_CUDA=1 
    export TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,3.7,5.2,6.0,6.1,7.0 
    export TF_CUDA_VERSION=9.2
    export TF_NCCL_VERSION=2.2.13
    export NCCL_INSTALL_PATH=/usr/local/nccl_2.2.13-1+cuda9.2_x86_64
    export TF_CUDNN_VERSION=7.1.4 
    export TF_ENABLE_XLA=1 
    export TF_NEED_TENSORRT=0
    export TF_NEED_VERBS=1 
    export TF_NEED_JEMALLOC=1 

    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH}:/usr/lib/x86_64-linux-gnu \
        tensorflow/tools/ci_build/builds/configured GPU \
        bazel build -c opt --copt=-march="broadwell" --config=cuda //tensorflow/tools/pip_package:build_pip_package \
                   --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
                   --copt="-O3" --copt=-mavx --copt=-mavx2 \
                      tensorflow/tools/pip_package:build_pip_package 
    rm /usr/local/cuda/lib64/stubs/libcuda.so.1 
    export CI_BUILD_PYTHON=/opt/anaconda3/bin/python
    export PYTHON_BIN_PATH=/opt/anaconda3/bin/python
    export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH 
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip 
    /opt/anaconda3/bin/pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl 
    rm -rf /tmp/pip /root/.cache

    # Uber Horvod
    mkdir -p /scrap/jenkins/workspace/hpc-power-pack/label/r-vmb-ubuntu16-u4-x86-64-MOFED-CHECKER
    ln -sf  /opt /scrap/jenkins/workspace/hpc-power-pack/label/r-vmb-ubuntu16-u4-x86-64-MOFED-CHECKER/hpcx_root
    ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1

    export PATH=$HPCX_MPI_DIR/bin:$PATH
    export OLD_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64/stubs
    export HOROVOD_NCCL_INCLUDE=/usr/include/nccl.h
    export HOROVOD_NCCL_LIB=/usr/lib/x86_64-linux-gnu
    HOROVOD_GPU_ALLREDUCE=NCCL /opt/anaconda3/bin/pip install horovod
    rm  /scrap/jenkins/workspace/hpc-power-pack/label/r-vmb-ubuntu16-u4-x86-64-MOFED-CHECKER/hpcx_root
    rm -rf /scrap/jenkins/workspace/hpc-power-pack/label/r-vmb-ubuntu16-u4-x86-64-MOFED-CHECKER
    rm /usr/local/cuda/lib64/stubs/libcuda.so.1
    export LD_LIBRARY_PATH=OLD_LD_LIBRARY_PATH

    ldconfig -v

%runscript
    echo "Singularity Container: TensorFlow 1.9, Ubuntu 16.04, CUDA 9.2, cuDNN 7.1, Anaconda Python 3.6, AVX2 instructions."
    echo "The image contains: TensorFlow, Jupyter, and Horovod for TensorFlow"
