Bootstrap: localimage
FROM: /var/lib/SingularityImages/nvidia_cuda_9.2_cudnn_7_ubuntu16.04.img
%environment
    # Can't get automatic sourcing of the HPCX init file. So hardwiring it here.
    # Version specific assignments here.
    export CUDA_DIR=/usr/local/cuda
    export HPCX_DIR=/opt/hpcx-v2.0.0-gcc-MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64
    export HPCX_MPI_DIR=${HPCX_DIR}/ompi-v3.0.x
    export HPCX_IPM_DIR=${HPCX_MPI_DIR}/tests/ipm-2.0.6
#    # No version specific specifications below this line.
    export HPCX_IPM_LIB=${HPCX_IPM_DIR}/lib/libipm.so
    export HPCX_BUPC_DIR=${HPCX_DIR}/bupc
    export HPCX_IBPROF_LIB=${HPCX_DIR}/ibprof/lib/libibprof.so
    export HPCX_SHARP_DIR=${HPCX_DIR}/sharp
    export HPCX_HCOLL_DIR=${HPCX_DIR}/hcoll
    export HPCX_MXM_DIR=${HPCX_DIR}/mxm
    export HPCX_UCX_DIR=${HPCX_DIR}/ucx
    export HPCX_IBPROF_DIR=${HPCX_DIR}/ibprof
    export HPCX_FCA_DIR=${HPCX_DIR}/fca
    export HPCX_OSHMEM_DIR=${HPCX_MPI_DIR}
    export HPCX_MPI_TESTS_DIR=${HPCX_OSHMEM_DIR}/tests
    export SHMEM_HOME=${HPCX_MPI_DIR}
    export OPAL_PREFIX=${HPCX_MPI_DIR}
    export OMPI_HOME=${HPCX_MPI_DIR}
    export MPI_HOME=${HPCX_MPI_DIR}
    export OSHMEM_HOME=${HPCX_MPI_DIR}
    export LD_LIBRARY_PATH=${HPCX_DIR}/mxm/lib:${HPCX_UCX_DIR}/lib:${HPCX_SHARP_DIR}/lib:${HPCX_HCOLL_DIR}/lib:${HPCX_MPI_DIR}/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CUDA_DIR}/lib64:${CUDA_DIR}/extras/CUPTI/lib64:/usr/local/nccl_2.2.13-1+cuda9.2_x86_64/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/.singularity.d/libs:/usr/lib/x86_64-linux-gnu
    export PATH=${HPCX_DIR}/bupc/bin:${HPCX_DIR}/hcoll/bin:${HPCX_DIR}/ucx/bin:${HPCX_DIR}/mxm/bin
    export PATH=${PATH}:${HPCX_MPI_DIR}/bin:${CUDA_DIR}/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    export CPATH=${HPCX_MPI_DIR}/include:${HPCX_UCX_DIR}/include:${HPCX_SHARP_DIR}/include:${HPCX_MXM_DIR}/include:${HPCX_HCOLL_DIR}/include
    export JUPYTER_CONFIG_DIR=/.jupyter
    export PATH=/opt/anaconda3/bin:$PATH

%labels
	Maintainer Stephen Fleischman
    Framework TensorFlow
    Version  1.10.1
    Build  CUDA 9.2 cuDNN 7.1 x86_64 AVX2 (Broadwell), OFED IB.
    Installed Horovod, OpenNMT

%help
    TensorFlow 1.10.1 GPU Singularity Container
    Maintainer: Stephen Fleischman

%setup
    export COMMON=/lvol/sfleisch/dlbs/singularity/common
    cp ${COMMON}/Anaconda3-5.2.0-Linux-x86_64.sh $SINGULARITY_ROOTFS

%post
    ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 
    export LD_LIBRARY_PATH=/host-libs:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs
    export PATH=/usr/local/cuda/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

    bash /Anaconda3-5.2.0-Linux-x86_64.sh  -bfp /opt/anaconda3
    rm /Anaconda3-5.2.0-Linux-x86_64.sh
    export PATH=/opt/anaconda3/bin:$PATH
    pip install --upgrade pip
    pip --no-cache-dir install --upgrade absl-py

    #Install Bazel

    # Set up Bazel.
    # Running bazel inside a `docker build` command causes trouble, cf: https://github.com/bazelbuild/bazel/issues/134
    # The easiest solution is to set up a bazelrc file forcing --batch.
    # echo "startup --batch" >>/etc/bazel.bazelrc
    # Similarly, we need to workaround sandboxing issues:
    # https://github.com/bazelbuild/bazel/issues/418
    echo "build --spawn_strategy=standalone --genrule_strategy=standalone" >> /etc/bazel.bazelrc

    export BAZEL_VERSION=0.16.0
    mkdir -p /bazel
    cd /bazel
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE
    chmod +x bazel-*.sh
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
    cd / && rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
    ldconfig -v

%runscript
    echo "This Singularity image contains preliminary installation for TensorFlow. Through installing Bazel."
