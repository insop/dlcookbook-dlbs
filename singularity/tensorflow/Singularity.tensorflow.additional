Bootstrap: localimage
FROM: tensorflow-1.10.0-base.img
%environment
    # Can't get automatic sourcing of the HPCX init file. So hardwiring it here.
    # Version specific assignments here.
    export CUDA_DIR=/usr/local/cuda
    export HPCX_DIR=/opt/hpcx-v2.0.0-gcc-MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64
    export HPCX_MPI_DIR=${HPCX_DIR}/ompi-v3.0.x
    export HPCX_IPM_DIR=${HPCX_MPI_DIR}/tests/ipm-2.0.6
#    # No version specific specifications below this line.
    export HPCX_IPM_LIB=${HPCX_IPM_DIR}/lib/libipm.so
    export HPCX_BUPC_DIR=${HPCX_DIR}/bupc
    export HPCX_IBPROF_LIB=${HPCX_DIR}/ibprof/lib/libibprof.so
    export HPCX_SHARP_DIR=${HPCX_DIR}/sharp
    export HPCX_HCOLL_DIR=${HPCX_DIR}/hcoll
    export HPCX_MXM_DIR=${HPCX_DIR}/mxm
    export HPCX_UCX_DIR=${HPCX_DIR}/ucx
    export HPCX_IBPROF_DIR=${HPCX_DIR}/ibprof
    export HPCX_FCA_DIR=${HPCX_DIR}/fca
    export HPCX_OSHMEM_DIR=${HPCX_MPI_DIR}
    export HPCX_MPI_TESTS_DIR=${HPCX_OSHMEM_DIR}/tests
    export SHMEM_HOME=${HPCX_MPI_DIR}
    export OPAL_PREFIX=${HPCX_MPI_DIR}
    export OMPI_HOME=${HPCX_MPI_DIR}
    export MPI_HOME=${HPCX_MPI_DIR}
    export OSHMEM_HOME=${HPCX_MPI_DIR}
    export LD_LIBRARY_PATH=${HPCX_DIR}/mxm/lib:${HPCX_UCX_DIR}/lib:${HPCX_SHARP_DIR}/lib:${HPCX_HCOLL_DIR}/lib:${HPCX_MPI_DIR}/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CUDA_DIR}/lib64:${CUDA_DIR}/extras/CUPTI/lib64:/usr/local/nccl_2.2.13-1+cuda9.2_x86_64/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/.singularity.d/libs:/usr/lib/x86_64-linux-gnu
    export PATH=${HPCX_DIR}/bupc/bin:${HPCX_DIR}/hcoll/bin:${HPCX_DIR}/ucx/bin:${HPCX_DIR}/mxm/bin
    export PATH=${PATH}:${HPCX_MPI_DIR}/bin:${CUDA_DIR}/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/cuda-9.2/bin
    export CPATH=${HPCX_MPI_DIR}/include:${HPCX_UCX_DIR}/include:${HPCX_SHARP_DIR}/include:${HPCX_MXM_DIR}/include:${HPCX_HCOLL_DIR}/include
    export JUPYTER_CONFIG_DIR=/.jupyter
    export PATH=/opt/anaconda3/bin:$PATH
    export export LC_ALL=C

%labels
	Maintainer Stephen Fleischman
    Framework TensorFlow
    Version  1.10.0
    Build  CUDA 9.2 cuDNN 7.1 x86_64 AVX2 (Broadwell), OFED IB.
    Installed Horovod, OpenNMT and Tensor2Tensor

%help
    TensorFlow 1.10.0 GPU Singularity Container
    Maintainer: Stephen Fleischman
%files
    nvidia-examples-18.06.tgz /
    ../common/nv-tensorrt-repo-ubuntu1604-cuda9.2-ga-trt4.0.1.6-20180612_1-1_amd64.deb /
    ../common/pycuda-2018.1.tar.gz /
%post
    # Update when versions change
    export OFED=MLNX_OFED_LINUX-4.2-1.2.0.0-ubuntu16.04-x86_64
    export HPCX=hpcx-v2.0.0-gcc-MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64
    export HPCX_MPI_DIR=/opt/${HPCX}/ompi-v3.0.x
    export PATH=/opt/anaconda3/bin:/usr/local/cuda-9.2/bin:$PATH
    #Install NVidia Examples from the nvcr.io/tensorflow:18.04-py3 NGC image
    cd /opt && tar xvzf /nvidia-examples-18.06.tgz && rm /nvidia-examples-18.06.tgz

    # tensorrt
    cd /opt
    tar xvzf /pycuda-2018.1.tar.gz
    cd pycuda-2018.1
    python setup.py install
    rm /pycuda-2018.1.tar.gz
    rm -f /Anaconda3-5.2.0-Linux-x86_64.sh

    # TensorFlow Hub
    pip install tensorflow_hub
    pip install tensornets

    #Install tensorrt and move to Anaconda Python 3.6
    dpkg -i /nv-tensorrt-repo-ubuntu1604-cuda9.2-ga-trt4.0.1.6-20180612_1-1_amd64.deb
    rm /nv-tensorrt-repo-ubuntu1604-cuda9.2-ga-trt4.0.1.6-20180612_1-1_amd64.deb
    apt-get update
    apt-get install -y --no-install-recommends tensorrt python3-libnvinfer-doc uff-converter-tf
    mv /usr/lib/python3.5/dist-packages/* /opt/anaconda3/lib/python3.6/site-packages
    rm  -rf /usr/lib/python3.5/dist-packages
    cd /opt/anaconda3/lib/python3.6/site-packages/tensorrt
    mv ./infer/_nv_infer_bindings.cpython-35m-x86_64-linux-gnu.so ./infer/_nv_infer_bindings.cpython-36m-x86_64-linux-gnu.so
    mv ./plugins/_nv_infer_plugin_bindings.cpython-35m-x86_64-linux-gnu.so ./plugins/_nv_infer_plugin_bindings.cpython-36m-x86_64-linux-gnu.so
    mv ./utils/_nv_utils_bindings.cpython-35m-x86_64-linux-gnu.so ./utils/_nv_utils_bindings.cpython-36m-x86_64-linux-gnu.so
    mv ./parsers/uffparser/_nv_uff_parser_bindings.cpython-35m-x86_64-linux-gnu.so ./parsers/uffparser/_nv_uff_parser_bindings.cpython-36m-x86_64-linux-gnu.so
    mv ./parsers/onnxparser/_nv_onnx_parser_bindings.cpython-35m-x86_64-linux-gnu.so ./parsers/onnxparser/_nv_onnx_parser_bindings.cpython-36m-x86_64-linux-gnu.so
    mv ./parsers/caffeparser/_nv_caffe_parser_bindings.cpython-35m-x86_64-linux-gnu.so ./parsers/caffeparser/_nv_caffe_parser_bindings.cpython-36m-x86_64-linux-gnu.so


    # Install OpenNMT-tf for machine translation
    cd /opt
    git clone https://github.com/OpenNMT/OpenNMT-tf.git OpenNMT-tf
    cd OpenNMT-tf
    git reset --hard cb4ee383b838d11846f160fdba3bd06df5c7441b
    echo `which python`
    python setup.py install

    # tensor2tensor
    # https://github.com/tensorflow/tensor2tensor#installation
    cd /opt
    git clone https://github.com/tensorflow/tensor2tensor.git tensor2tensor
    cd tensor2tensor
    git reset --hard 6edbd6b7d14ae81e359b328a47d6c6187d0d5844
    python setup.py install


    ldconfig -v

%runscript
    echo "Singularity Container: TensorFlow 1.9, Ubuntu 16.04, CUDA 9.2, cuDNN 7.1, Anaconda Python 3.6, AVX2 instructions."
    echo "The image contains: Jupyter, horovod, OpenNMT for TensorFlow"
    echo "Includes OpenNMT, Tensor2Tensor"
