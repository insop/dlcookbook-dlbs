Bootstrap: docker
FROM: docker://nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04
#You can save some time if you have to run this build script more than once by building an NVidia/Ubuntu base image once from the Docker image, with
#Singularity.nv and commenting the first two lines above and uncommenting the next two lines.
#Bootstrap: localimage
#FROM: /var/lib/SingularityImages/nvidia_cuda_9.2_cudnn_7_ubuntu16.04.img
%labels
    Maintainer Stephen Fleischman
    Common packages
    Build CUDA 9.2 cuDNN 7.2.1 x86_64 OFED IB.
%setup
    cp common_env.sh ${SINGULARITY_ROOTFS}
    . ./common_env.sh
    cp upload/MLNX_OFED_LINUX-${OFED_VERSION}-${OFED_ARCH}.tgz  $SINGULARITY_ROOTFS
    cp upload/hpcx-${HPCX_VERSION}-${HPCX_ARCH}-MLNX_OFED_LINUX-${OFED_VERSION}-${OFED_ARCH}.tbz  $SINGULARITY_ROOTFS
    cp upload/nccl_${NCCL_VERSION}+${NCCL_ARCH}.txz  $SINGULARITY_ROOTFS
    cp upload/Anaconda3-${ANACONDA3_VERSION}-${ANACONDA3_ARCH}.sh  $SINGULARITY_ROOTFS
    cp upload/pycuda-${PYCUDA_VERSION}.tar.gz $SINGULARITY_ROOTFS
    cp upload/jupyter_notebook_config.py  $SINGULARITY_ROOTFS
	cat ./common_env.sh >> ${SINGULARITY_ROOTFS}/.singularity.d/env/90-environment.sh

%help
    NVidia GPU Singularity Container with Common Packages
    Maintainer: Stephen Fleischman

%environment
    export CUDA_DIR=/usr/local/cuda
    export HPCX_DIR=/opt/hpcx-${HPCX_VERSION}-${HPCX_ARCH}-MLNX_OFED_LINUX-${OFED_VERSION}-${OFED_ARCH}
    export HPCX_MPI_DIR=${HPCX_DIR}/ompi-${OMPI_VERSION}
    export HPCX_IPM_DIR=${HPCX_MPI_DIR}/tests/ipm-${IPM_VERSION}
    export HPCX_IPM_LIB=${HPCX_IPM_DIR}/lib/libipm.so
    export HPCX_BUPC_DIR=${HPCX_DIR}/bupc
    export HPCX_IBPROF_LIB=${HPCX_DIR}/ibprof/lib/libibprof.so
    export HPCX_SHARP_DIR=${HPCX_DIR}/sharp
    export HPCX_HCOLL_DIR=${HPCX_DIR}/hcoll
    export HPCX_MXM_DIR=${HPCX_DIR}/mxm
    export HPCX_UCX_DIR=${HPCX_DIR}/ucx
    export HPCX_IBPROF_DIR=${HPCX_DIR}/ibprof
    export HPCX_FCA_DIR=${HPCX_DIR}/fca
    export HPCX_OSHMEM_DIR=${HPCX_MPI_DIR}
    export HPCX_MPI_TESTS_DIR=${HPCX_OSHMEM_DIR}/tests
    export SHMEM_HOME=${HPCX_MPI_DIR}
    export OPAL_PREFIX=${HPCX_MPI_DIR}
    export OMPI_HOME=${HPCX_MPI_DIR}
    export MPI_HOME=${HPCX_MPI_DIR}
    export OSHMEM_HOME=${HPCX_MPI_DIR}
    export LD_LIBRARY_PATH=${HPCX_DIR}/mxm/lib:${HPCX_UCX_DIR}/lib:${HPCX_SHARP_DIR}/lib:${HPCX_HCOLL_DIR}/lib:${HPCX_MPI_DIR}/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CUDA_DIR}/lib64:${CUDA_DIR}/extras/CUPTI/lib64
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/.singularity.d/libs:/usr/lib/x86_64-linux-gnu:/usr/local/lib
    export PATH=/opt/anaconda3/bin:${HPCX_DIR}/bupc/bin:${HPCX_DIR}/hcoll/bin:${HPCX_DIR}/ucx/bin:${HPCX_DIR}/mxm/bin
    export PATH=${PATH}:${HPCX_MPI_DIR}/bin:${CUDA_DIR}/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    export CPATH=${HPCX_MPI_DIR}/include:${HPCX_UCX_DIR}/include:${HPCX_SHARP_DIR}/include:${HPCX_MXM_DIR}/include:${HPCX_HCOLL_DIR}/include
    export JUPYTER_CONFIG_DIR=/.jupyter
    export export LC_ALL=C

%post
    . /common_env.sh
    export LD_LIBRARY_PATH=/host-libs:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs:/usr/local/lib
    export PATH=/usr/local/cuda/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    export MOFED_DIR=/MLNX_OFED_LINUX-${OFED_VERSION}-${OFED_ARCH}
    export MOFED_SITE_PLACE=MLNX_OFED-${OFED_VERSION}
    export MOFED_IMAGE=/MLNX_OFED_LINUX-${OFED_VERSION}-${OFED_ARCH}.tgz
    export HPCX_TBZ=/hpcx-${HPCX_VERSION}-${HPCX_ARCH}-MLNX_OFED_LINUX-${OFED_VERSION}-${OFED_ARCH}.tbz
    export ANACONDA_INSTALLER=/Anaconda3-${ANACONDA3_VERSION}-${ANACONDA3_ARCH}.sh
    export NCCL_TGZ=/nccl_${NCCL_VERSION}+${NCCL_ARCH}.txz
    export PYCUDA=pycuda-${PYCUDA_VERSION}
    export PYCUDA_TGZ=/${PYCUDA}.tar.gz


    # Set up our notebook config.
    mkdir -p /.jupyter && mv /jupyter_notebook_config.py /.jupyter && chmod 777 /.jupyter && echo $(ls /.jupyter)
    # We will use Anaconda Python for python3
    bash $ANACONDA_INSTALLER -bfp /opt/anaconda3 && rm $ANACONDA_INSTALLER
    export PATH=/opt/anaconda3/bin:$PATH
    python3 -m pip install --upgrade pip
    python3 -m pip --no-cache-dir install pydot birdseye parallel-ssh mock
    # Cool stuff
    conda install -c conda-forge jupyterlab

    apt-get update 
    apt-get install -y --no-install-recommends \
            build-essential \
            bzip2 \
            ca-certificates \
            cmake \
            curl \
            environment-modules \
            firefox \
            gdb \
            git \
            hwloc \
            iputils-ping \
            libcurl3-dev \
            libfreetype6-dev \
            libgflags-dev \
            libgoogle-glog-dev \
            libgtest-dev \
            libhiredis-dev \
            libhwloc-common \
            libhwloc-dev \
            libhwloc-plugins \
            libibverbs-dev \
            libiomp-dev \
            libjemalloc-dev \
            liblapack-dev \
            libleveldb-dev \
            liblmdb-dev \
            libopenblas-dev \
            libopencv-dev \
            libpng12-dev \
            libprotobuf-dev \
            libsnappy-dev \
            libtool \
            libzmq3-dev \
            lsof \
            nasm \
            net-tools \
            numactl \
            openjdk-8-jdk \
            openjdk-8-jre-headless \
            openssh-server \
            pkg-config \
            protobuf-compiler \
            pylint \
            rcs \
            redis-tools \
            rsync \
            software-properties-common \
            tar \
            unzip \
            vim \
            wget \
            xfonts-base xfce4 xfce4-goodies tightvncserver \
            zip \
            zlib1g-dev
    apt-get clean
    rm -rf /var/lib/apt/lists/*

    ########## Mellanox OFED INSTALLATION STEPS ###################
    tar -xzvf ${MOFED_IMAGE}
    ${MOFED_DIR}/mlnxofedinstall --user-space-only --without-fw-update --all -q && cd /
    rm -rf ${MOFED_DIR} ${MOFED_IMAGE}
    # Install Mellanox HPCX SDK
    ls /
    echo "HPCX_TBZ: $HPCX_TBZ"
    cd /opt &&  tar xjf ${HPCX_TBZ} && rm ${HPCX_TBZ}

    ## Put NCCL in one place
    cd /usr/local && tar xvf $NCCL_TGZ && rm $NCCL_TGZ

    #pycuda
    cd /opt
    tar xvzf $PYCUDA_TGZ && rm $PYCUDA_TGZ
    cd $PYCUDA && python setup.py install && cd .. && rm -rf $PYCUDA
    

    ldconfig

%runscript
    echo "Singularity Container: Ubuntu 16.04, Mellanox IB, OpenMPI, CUDA 9.2, cuDNN 7.2.1, python 3.6, common Ubuntu and Python packages.
    echo "The image contains: Jupyter
