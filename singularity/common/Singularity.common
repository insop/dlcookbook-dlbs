Bootstrap: docker
FROM: docker://nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04
%labels
    Maintainer Stephen Fleischman
    Common packages
    Build  CUDA 9.0 cuDNN 7.1 x86_64 OFED IB.

%files
    ../common/MLNX_OFED_LINUX-4.2-1.2.0.0-ubuntu16.04-x86_64.tgz /tmp
    ../common/jupyter_notebook_config.py /

%help
    NVidia GPU Singularity Container with Common Packages
    Maintainer: Stephen Fleischman

%environment
    export CUDA_DIR=/usr/local/cuda
    export HPCX_DIR=/opt/hpcx-v2.0.0-gcc-MLNX_OFED_LINUX-4.2-1.0.0.0-ubuntu16.04-x86_64
    export HPCX_MPI_DIR=${HPCX_DIR}/ompi-v3.0.x
    export HPCX_IPM_DIR=${HPCX_MPI_DIR}/tests/ipm-2.0.6
#    # No version specific specifications below this line.
    export HPCX_IPM_LIB=${HPCX_IPM_DIR}/lib/libipm.so
    export HPCX_BUPC_DIR=${HPCX_DIR}/bupc
    export HPCX_IBPROF_LIB=${HPCX_DIR}/ibprof/lib/libibprof.so
    export HPCX_SHARP_DIR=${HPCX_DIR}/sharp
    export HPCX_HCOLL_DIR=${HPCX_DIR}/hcoll
    export HPCX_MXM_DIR=${HPCX_DIR}/mxm
    export HPCX_UCX_DIR=${HPCX_DIR}/ucx
    export HPCX_IBPROF_DIR=${HPCX_DIR}/ibprof
    export HPCX_FCA_DIR=${HPCX_DIR}/fca
    export HPCX_OSHMEM_DIR=${HPCX_MPI_DIR}
    export HPCX_MPI_TESTS_DIR=${HPCX_OSHMEM_DIR}/tests
    export SHMEM_HOME=${HPCX_MPI_DIR}
    export OPAL_PREFIX=${HPCX_MPI_DIR}
    export OMPI_HOME=${HPCX_MPI_DIR}
    export MPI_HOME=${HPCX_MPI_DIR}
    export OSHMEM_HOME=${HPCX_MPI_DIR}
    export LD_LIBRARY_PATH=${HPCX_DIR}/mxm/lib:${HPCX_UCX_DIR}/lib:${HPCX_SHARP_DIR}/lib:${HPCX_HCOLL_DIR}/lib:${HPCX_MPI_DIR}/lib
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CUDA_DIR}/lib64:${CUDA_DIR}/extras/CUPTI/lib64
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/.singularity.d/libs:/usr/lib/x86_64-linux-gnu
    export PATH=${HPCX_DIR}/bupc/bin:${HPCX_DIR}/hcoll/bin:${HPCX_DIR}/ucx/bin:${HPCX_DIR}/mxm/bin
    export PATH=${PATH}:${HPCX_MPI_DIR}/bin:${CUDA_DIR}/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
    export CPATH=${HPCX_MPI_DIR}/include:${HPCX_UCX_DIR}/include:${HPCX_SHARP_DIR}/include:${HPCX_MXM_DIR}/include:${HPCX_HCOLL_DIR}/include
    export JUPYTER_CONFIG_DIR=/.jupyter


%post
    ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1
    export LD_LIBRARY_PATH=/host-libs:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/cuda/lib64/stubs
    export PATH=/usr/local/cuda/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

    apt-get update 
    apt-get install -y --no-install-recommends \
        bzip2 \
        build-essential \
        curl \
        git \
        net-tools \
        lsof \
        vim \
        software-properties-common \
        pylint \
        python3 \
        python3-dev \
        python3-pip \
        environment-modules \
        ca-certificates \
        cmake \
        hwloc \
        iputils-ping \
        libcurl3-dev \
        libfreetype6-dev \
        libgflags-dev \
        libgoogle-glog-dev \
        libgtest-dev \
        libhiredis-dev \
        libhwloc-common \
        libhwloc-dev \
        libhwloc-plugins \
        libibverbs-dev \
        libiomp-dev \
        libjemalloc-dev \
        liblapack-dev \
        libleveldb-dev \
        liblmdb-dev \
        libopenblas-dev \
        libopencv-dev \
        libpng12-dev \
        libprotobuf-dev \
        libsnappy-dev \
        libtool \
        libzmq3-dev \
        nasm \
        numactl \
        openjdk-8-jdk \
        openjdk-8-jre-headless \
        openssh-server \
        pkg-config \
        protobuf-compiler \
        redis-tools \
        rsync \
        tar \
        unzip \
        wget \
        zip \
        zlib1g-dev
    rm -rf /var/lib/apt/lists/*

    ln -sf /usr/bin/python3 /usr/bin/python
    python3 -m pip install --no-cache-dir setuptools wheel
    python3 -m pip install --no-cache-dir \
        flask \
        future \
        graphviz \
        hypothesis \
        jupyter \
        lmdb \
        matplotlib \
        numpy \
        protobuf \
        pandas \
        pydot \
        pyyaml \
        redis \
        requests \
        scipy \
        scikit-image \
        scikit-learn \
        matplotlib \
        ipython \
        jupyter \
        pandas \
        sympy \
        nose \
        six \
        tornado \
        typing
    python3 -m pip install --no-cache-dir Pillow

    sed -i -e "s/alias ls=/#alias ls=/" /root/.bashrc
    echo $'syntax off\nset ts=4\nset nohlsearch' > /root/.vimrc

    ########## Mellanox OFED INSTALLATION STEPS ###################
    #  Set MOFED directory, image and working directory
    cd /tmp
    export MOFED_DIR=MLNX_OFED_LINUX-4.2-1.2.0.0-ubuntu16.04-x86_64
    export MOFED_SITE_PLACE=MLNX_OFED-4.2-1.2.0.0
    export MOFED_IMAGE=MLNX_OFED_LINUX-4.2-1.2.0.0-ubuntu16.04-x86_64.tgz
    #wget http://content.mellanox.com/ofed/${MOFED_SITE_PLACE}/${MOFED_IMAGE} && \
    tar -xzvf ${MOFED_IMAGE}
    ${MOFED_DIR}/mlnxofedinstall --user-space-only --without-fw-update --all -q && cd ..
    rm -rf ${MOFED_DIR}
    rm -rf *.tgz

    ldconfig

    
%runscript
    echo "Singularity Container: Ubuntu 16.04, Mellanox IB, OpenMPI, CUDA 9.0, cuDNN 7, python 3.5, common Ubuntu and Python packages.
    echo "The image contains: Jupyter

