self.plan
[{u'caffe.backward_precision': u'', u'exp.cudnn': u'', u'exp.framework_title': u'BVLC Caffe', u'caffe.host_path': {u'type': u'str', u'val': u'${HOME}/projects/bvlc_caffe/build/tools', u'desc': u'Path to a BVLC Caffe executable in case of a bare metal run.'}, u'exp.rerun': False, u'caffe.args': [u"$('--solver=${caffe.model_dir}/${caffe.solver_file}' if '${exp.phase}' == 'training' else '')$", u"$('--model=${caffe.model_dir}/${caffe.model_file}' if '${exp.phase}' == 'inference' else '')$", u"$('-iterations ${exp.num_batches}' if '${exp.phase}' == 'inference' else '')$", u"$('--gpu=${exp.gpus}' if '${exp.device_type}' == 'gpu' else '')$"], u'caffe.model_file': u'${exp.id}.model.prototxt', u'exp.backend': u'', u'exp.num_warmup_batches': 1, u'monitor.backend_pid_folder': u"$('${monitor.pid_folder}' if not ${exp.docker} else '/workspace/tmp')$", u'exp.log_file': u'${exp.framework}_${exp.backend}_${exp.device_type}_${exp.model}_${exp.effective_batch}_${exp.id}.log', u'exp.docker_image': 'hpe/bvlc_caffe:cuda9-cudnn7', u'caffe.solver_file': u'${exp.id}.solver.prototxt', u'caffe.host_libpath': {u'type': u'str', u'val': u'', u'desc': u"Basically, it's a LD_LIBRARY_PATH for BVLC Caffe in case of a bare metal run."}, u'exp.node_id': u'', u'exp.docker_args': u'--rm', u'exp.framework_family': u'caffe', u'caffe.launcher': u'${DLBS_ROOT}/scripts/launchers/caffe.sh', u'exp.framework_fork': 'bvlc', u'caffe.fork': u'${exp.framework_fork}', u'exp.proj': u'', u'exp.num_gpus': u'$(${exp.num_local_gpus} * ${exp.num_nodes})$', u'__dlbs_2550e956f7bf45488ac5df8b3125f0d5_exp.framework_fork_0': 'bvlc', u'exp.device_type': u"$('gpu' if ${exp.num_gpus} > 0 else 'cpu')$", u'exp.docker': True, u'exp.num_local_replicas': u"$(len('${exp.gpus}'.replace(',', ' ').split()) if '${exp.device_type}' == 'gpu' else 1)$", u'exp.status': u'ok', u'exp.num_batches': 100, u'exp.data': u"$('synthetic' if '${exp.data_dir}' == '' else 'real')$", u'exp.framework': u'caffe', u'runtime.multinode_shared_dir': u'/ml/ml01/sfleisch', u'caffe.precision': u'', u'exp.model_title': u'', u'runtime.cuda_cache': u"$('/dev/shm/cudacache_{}'.format(Launcher.uuid))$", u'exp.gpus': u'0', u'caffe.data_backend': u'LMDB', u'exp.framework_ver': u'', u'caffe.forward_precision': u'', u'caffe.env': u'${runtime.EXPORT_CUDA_CACHE_PATH}', u'caffe.data_mean_file': u'', u'runtime.launcher': u'', u'exp.num_replicas': u'$(${exp.num_local_replicas} * ${exp.num_nodes})$', u'exp.device_title': u'', u'exp.framework_commit': u'', u'caffe.mirror': True, u'exp.status_msg': u'', u'exp.replica_batch': 16, u'caffe.data_dir': u'', u'runtime.EXPORT_CUDA_CACHE_PATH': u"CUDA_CACHE_PATH=$(('${runtime.cuda_cache}' if not ${exp.docker} else '/workspace/cuda_cache') if '${runtime.cuda_cache}' else '')$", u'exp.node_nic': u'', u'exp.singularity': False, u'caffe.action': u"$('train' if '${exp.phase}' == 'training' else 'time')$", u'exp.effective_batch': u"$(${exp.num_replicas}*${exp.replica_batch} if '${exp.device_type}' == 'gpu' else ${exp.num_nodes} * ${exp.replica_batch})$", u'monitor.launcher': u'${DLBS_ROOT}/scripts/resource_monitor.sh', u'caffe.forward_math_precision': u'', u'runtime.python': u"$(sys.executable if ${exp.docker} is False and ${exp.singularity} is False else 'python')$", u'exp.docker_launcher': u"$('nvidia-docker' if '${exp.device_type}' == 'gpu' else 'docker')$", u'monitor.frequency': 0, u'caffe.backward_math_precision': u'', u'exp.num_nodes': 1, u'exp.singularity_image': u'', u'exp.singularity_args': u"$('--nv' if '${exp.device_type}' == 'gpu' else '')$", u'caffe.data_mean_file_path': u"$(os.path.dirname(os.path.abspath('${caffe.data_mean_file}')) if '${caffe.data_mean_file}' else '')$", u'exp.cuda': u'', u'caffe.docker_args': [u'-i', u'--security-opt seccomp=unconfined', u'--pid=host', u'--volume=${DLBS_ROOT}/models/${exp.model}:/workspace/model', u"$('--volume=${runtime.cuda_cache}:/workspace/cuda_cache' if '${runtime.cuda_cache}' else '')$", u"$('--volume=${exp.data_dir}:/workspace/data' if '${exp.data_dir}' else '')$", u"$('--volume=${caffe.data_mean_file_path}:/workspace/image_mean' if '${exp.data_dir}' else '')$", u"$('--volume=${monitor.pid_folder}:/workspace/tmp' if ${monitor.frequency} > 0 else '')$", u'${exp.docker_args}', u'${exp.docker_image}'], u'caffe.docker_image': {u'type': u'str', u'val': u'hpe/bvlc_caffe:cuda9-cudnn7', u'desc': u'The name of a docker image to use for BVLC Caffe.'}, u'caffe.solver': [u"net: '${caffe.model_dir}/${caffe.model_file}'\\n", u'max_iter: ${exp.num_batches}\\n', u'test_interval: 0\\n', u'snapshot: 0\\n', u'snapshot_after_train: false\\n', u'base_lr: 0.01\\n', u"lr_policy: 'fixed'\\n", u"solver_mode: $('${exp.device_type}'.upper())$\\n", u"$('solver_data_type: ${caffe.solver_precision}' if '${exp.backend}' == 'nvidia_caffe' else '')$"], u'exp.dtype': u'float32', u'caffe.model_dir': u"$('${DLBS_ROOT}/models/${exp.model}' if not ${exp.docker} else '/workspace/model')$", u'caffe.singularity_image': u'', u'exp.model_opts': u'{}', u'exp.num_local_gpus': u"$(len(re.sub('[:,]', ' ', '${exp.gpus}').split()))$", u'caffe.solver_precision': u'', u'runtime.EXPORT_CUDA_VISIBLE_DEVICES': u'CUDA_VISIBLE_DEVICES=${runtime.visible_gpus}', u'monitor.pid_folder': u"$('/dev/shm/monitor_{}'.format(Launcher.uuid))$", u'exp.sys_info': u'', u'exp.id': u"$(uuid.uuid4().__str__().replace('-', ''))$", u'exp.data_dir': u'${${exp.backend}.data_dir}', 'DLBS_ROOT': '', u'exp.use_tensor_core': True, u'exp.data_store': u'', u'monitor.timeseries': u'time:str:1,mem_virt:float:2,mem_res:float:3,mem_shrd:float:4,cpu:float:5,mem:float:6,power:float:7,gpus:float:8:', u'exp.singularity_launcher': u'singularity', u'exp.phase': u'training', u'exp.model': u'', u'runtime.visible_gpus': u"$(re.sub('[:]', ',', '${exp.gpus}'))$", u'caffe.data_mean_file_name': u"$(os.path.basename('${caffe.data_mean_file}') if '${caffe.data_mean_file}' else '')$"}]
